# Config file for Dinosaur Planet Recompilation.

[input]
entrypoint = 0x80000400
# Paths are relative to the location of this config file.
output_func_path = "RecompiledFuncs"
rom_file_path = "baserom.patched.z64"
symbols_file_path = "dino.syms.toml"
relocatable_sections_path = "dino.dlls.txt"

[patches]
stubs = [
    "test_write",
    "check_dongle",
]

ignored = [
    "__osMakeMotorData",
    # unused problematic funcs
    "func_80011588",
    "func_80011490",
    "NOTosContSetch",
    "set_osPIHandle_Addr_to_0xa800000",
    "some_dma_func",
    "osEPi_WriteRead",
    "func_8005EE8C",
    "func_8005EFA8",
    "func_8005F1A0",
    "func_8005EE20",
    "func_8005F0D4",
    "func_8005F2A4"
]

# Hook game_tick
[[patches.hook]]
before_vram = 0x80013af0
func = "game_tick"
text = "game_tick_hook(rdram, ctx);"

# Hijack debug functions
[[patches.hook]]
func = "proutSyncPrintf"
text = "recomp_proutSyncPrintf(rdram, ctx); return;"
[[patches.hook]]
func = "dummied_print_func"
text = "recomp_dummied_print_func(rdram, ctx); return;"

# Hook DLL loading/unloading up to N64ModernRuntime's overlay system
[[patches.hook]]
before_vram = 0x8000BF18
func = "dll_load"
text = "gpr dllId = ctx->r7;"
[[patches.hook]]
before_vram = 0x8000C028
func = "dll_load"
text = "recomp_on_dll_load(dllId, ctx->r2 + MEM_W(0, ctx->r2));"
[[patches.hook]]
before_vram = 0x8000bfbc
func = "dll_load"
text = "recomp_on_dll_load_too_few_exports(dllId, ctx->r15, ctx->r24);"
[[patches.hook]]
before_vram = 0x8000c014
func = "dll_load"
text = "recomp_on_dll_load_too_many_dlls(dllId);"

[[patches.hook]]
before_vram = 0x8000C2B4
func = "func_8000C258"
text = "gpr dllListIdx = ctx->r2;"
[[patches.hook]]
before_vram = 0x8000C340
func = "func_8000C258"
text = "recomp_on_dll_unload(MEM_W(dllListIdx * 0x10, MEM_W(0, 0xFFFFFFFF800A7D10)));"

# DLL 31 contains the osFlash functions, redirect them to the recomp versions
[[patches.hook]]
func = "dll_31_osFlashInit"
text = "osFlashInit_recomp(rdram, ctx); return;"

[[patches.hook]]
func = "dll_31_osFlashReadId"
text = "osFlashReadId_recomp(rdram, ctx); return;"

[[patches.hook]]
func = "dll_31_osFlashClearStatus"
text = "osFlashClearStatus_recomp(rdram, ctx); return;"

[[patches.hook]]
func = "dll_31_osFlashSectorErase"
text = "osFlashSectorErase_recomp(rdram, ctx); return;"

[[patches.hook]]
func = "dll_31_osFlashWriteBuffer"
text = "osFlashWriteBuffer_recomp(rdram, ctx); return;"

[[patches.hook]]
func = "dll_31_osFlashWriteArray"
text = "osFlashWriteArray_recomp(rdram, ctx); return;"

[[patches.hook]]
func = "dll_31_osFlashReadArray"
text = "osFlashReadArray_recomp(rdram, ctx); return;"

# replace PI_STATUS check with yield
[[patches.hook]]
before_vram = 0x800012d8
func = "func_80001220"
text = "yield_self(rdram);"
[[patches.instruction]]
vram = 0x800012d8
func = "func_80001220"
value = 0x00001025 # lw v0,0x0(v1) -> or v0,zero,zero

# osAiGetLength got inlined
[[patches.hook]]
before_vram = 0x80011cc0
func = "func_80011C70"
text = "ctx->r25 = recomp_osAiGetLength();"
[[patches.instruction]]
vram = 0x80011CC0
func = "func_80011C70"
value = 0x00000000 # lw t9,0x4(t8) -> nop

# Patch out ROM read
[[patches.instruction]]
vram = 0x80001300
func = "func_80001220"
value = 0x00004825 # lw t1,0x578(t9) -> or t1,zero,zero

# Skip security dongle checks
[[patches.hook]]
before_vram = 0x81012500
func = "dll_3_func_60AC"
text = "goto L_8101254C;"
[[patches.hook]]
before_vram = 0x811777d4
func = "dll_210_func_A3FC"
text = "goto L_81177828;"

## Commit some sins to get 0x8001B4F0-0x8001C8D4 to recompile...
# $ra is saved in $t9 because functions called before it don't correctly save $ra to the stack,
# this is not relevant since we just want to recognize this as a return statement, so override it
[[patches.instruction]]
vram = 0x8001ba28
func = "func_8001B6F0"
value = 0x03e00008  # jr $t9 -> jr $ra
[[patches.hook]]
before_vram = 0x8001ba28
func = "func_8001B6F0"
text = "assert(ctx->r25 == 0);"

# There's a function pointer table at 0x80090444 that's never written to and only has one valid
# branch. Just convert it to a jump to that one branch so recomp can reason about it.
[[patches.instruction]]
vram = 0x8001c8b0
func = "func_8001C8A0"
value = 0x0800722e # jr $s1 -> j 0x8001c8b8
[[patches.hook]]
before_vram = 0x8001C8B0
func = "func_8001C8A0"
text = "assert(ctx->r17 == 0x8001c8b8);"

# Record when func_8001B4F0 is entered
[[patches.hook]]
before_vram = 0x8001B4F0
func = "func_8001B4F0"
text = "recomp_on_func_8001B4F0_entry();"

# Ensure the return routine of func_8001B4F0 doesn't run twice.
# This can happen as a consequence of how this big asm segment is recompiled.
[[patches.hook]]
before_vram = 0x8001C83C
func = "func_8001C694"
text = "if (recomp_did_func_8001B4F0_return()) { return; } recomp_on_func_8001B4F0_ret();"
[[patches.hook]]
before_vram = 0x8001C83C
func = "func_8001C6C8"
text = "if (recomp_did_func_8001B4F0_return()) { return; } recomp_on_func_8001B4F0_ret();"
[[patches.hook]]
before_vram = 0x8001C83C
func = "func_8001C834"
text = "if (recomp_did_func_8001B4F0_return()) { return; } recomp_on_func_8001B4F0_ret();"
[[patches.hook]]
before_vram = 0x8001C83C
func = "func_8001C83C"
text = "if (recomp_did_func_8001B4F0_return()) { return; } recomp_on_func_8001B4F0_ret();"

# Verify that this is never a function pointer return
[[patches.hook]]
before_vram = 0x8001C898
func = "func_8001C694"
text = "assert(ctx->r31 == 0);"
[[patches.hook]]
before_vram = 0x8001C898
func = "func_8001C6C8"
text = "assert(ctx->r31 == 0);"
[[patches.hook]]
before_vram = 0x8001C898
func = "func_8001C834"
text = "assert(ctx->r31 == 0);"
[[patches.hook]]
before_vram = 0x8001C898
func = "func_8001C83C"
text = "assert(ctx->r31 == 0);"
